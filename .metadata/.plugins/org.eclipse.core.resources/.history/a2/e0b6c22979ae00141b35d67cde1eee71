import java.math.BigInteger;
import java.util.Random;

public class RSA {

	private static BigInteger p, q, n, phi, e;
	private static int bitsize;

	public static void main(String[] args) {
		// p = BigInteger.probablePrime(5, new Random());
		// q = BigInteger.probablePrime(5, new Random());
		p = new BigInteger("43");
		q = new BigInteger("59");

		n = p.multiply(q);
		e = new BigInteger("13");
		phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));

		System.out.println("p = \t" + p);
		System.out.println("q = \t" + q);
		System.out.println("n = \t" + n);
		System.out.println("ø(n) = \t" + phi);
		System.out.println("e = \t" + e);
		System.out.println("GCD(e,ø(n)) = " + e.gcd(phi));
		System.out.println();

		// String ascii = toascii("HELLO WORLD ");
		String ascii = "15200111";

		String[] blocks = breakIntoBlocks(ascii);

		for (int i = 0; i < blocks.length; i++) {
			System.out.print(blocks[i] + "\t");
		}

		System.out.println();

		String[] code = encipher(blocks);

		for (int i = 0; i < code.length; i++) {
			System.out.print(code[i] + "\t");
		}
		System.out.println();

		String[] decipheredCode = decipher(code);

		for (int i = 0; i < decipheredCode.length; i++) {
			System.out.print(decipheredCode[i] + "\t");
		}
		
		System.out.println(valueToAscii(decipheredCode.toString()));

	}

	public static String[] encipher(String[] ascii) {
		String[] code = new String[ascii.length];
		for (int i = 0; i < ascii.length; i++) {
			BigInteger c = new BigInteger(ascii[i]);
			String s = c.modPow(e, n).toString();
			while (s.length() < 4) {
				s = "0" + s;
			}
			code[i] = s;
		}

		return code;
	}

	public static String[] decipher(String[] code) {
		String[] decipheredCode = new String[code.length];
		for (int i = 0; i < code.length; i++) {
			BigInteger a = new BigInteger(code[i]);
			String s = a.modPow(e.modInverse(phi), n).toString();
			while (s.length() < 4) {
				s = "0" + s;
			}
			decipheredCode[i] = s;
		}
		return decipheredCode;
	}

	public static String valueToAscii(String decipheredCode) {
		String text = Character.toString((char) Integer
				.parseInt(decipheredCode));
		return text;
	}

	public static String[] breakIntoBlocks(String ascii) {
		String[] blocks = new String[ascii.length()];

		for (int i = 0; i < blocks.length; i++) {
			if (ascii.length() >= 4) {
				blocks[i] = ascii.substring(0, 4);
				ascii = ascii.substring(4, ascii.length());
			} else {
				blocks[i] = "0000";
			}
		}

		return blocks;
	}

	public static String asciiToValue(char letter) {
		int ascii = letter;

		if (ascii < 10) {
			return ("0" + ascii);
		}
		return (ascii + "");
	}

}

// public RSA(BigInteger n, BigInteger e) {
// this.n = n;
// this.e = e;
// }
//
// public RSA(int bits) {
// bitsize = bits;
// Random r = new Random();
// p = BigInteger.probablePrime(bitsize / 2, r);
// q = BigInteger.probablePrime(bitsize / 2, r);
//
// n = p.multiply(q);
// e = new BigInteger("13");
// phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
// }
//
// public static void main(String[] args) {
// RSA rsa = new RSA(1024);
//
// }
//
// }
