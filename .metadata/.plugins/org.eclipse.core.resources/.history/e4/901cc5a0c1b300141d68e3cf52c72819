import java.io.*;
import java.math.BigInteger;
import java.util.*;

public class RSA extends Keys {

	private final int BITLENGTH = 500;

	public static void main(String[] args) throws IOException {
		Scanner input = new Scanner(System.in);
		// System.out.println("Type a message that you would like to encode.");
		// String message = input.nextLine();
		String message = "hello world";
		 test1(message);
		//encipherWithPublicKey(message);

		input.close();
	}

	public static void test1(String message) {
		RSA rsa = new RSA();
		//rsa.printStart();
		
//		rsa.setPublicKeys(new BigInteger("3060084906113564248032038616686762607407956218221127915675705444593472242087893937424385408785996116055453015479179470394687753674511870435940352414691"),
//				new BigInteger("9085738789643734507586949339705078141163300897838596885226786058271122592339719871762647821226927977532508194440422272821908676433506506062361446741436462379325844686063674933664577511576856058458196104519181226891226508209706964876321070758896301118373056524553354629403245082586649448120985894615757"));
//		rsa.setInverse(new BigInteger("1315519438747710639370121126674086845038920919271545228937348893379276688106911027660293623484152588784064611373465007606366080159386378176833835230537407586482847919652068810690979123844954279736681983018002862587546489426102862747902406263541842362911992508745143524824288386653296341116606253911371"));
		
		
		
		String plainText = rsa.toascii(message);
		System.out.println("PlainText:\t" + plainText);

		String cipherText = rsa.encipher(new BigInteger(plainText));
		System.out.println("CipherText: \t" + cipherText);

		String decipheredText = rsa.decipher(new BigInteger(cipherText));
		System.out.println("DecipheredText: " + decipheredText);

		System.out.println(rsa.valueToAscii(decipheredText));
		
		System.out.println("\nE: "+rsa.getE());
		System.out.println("N: "+rsa.getN());
		System.out.println("I: "+rsa.getInverse());
	}

	@SuppressWarnings("resource")
	public static void encipherWithPublicKey(String message) {

		try {
			BufferedReader reader = new BufferedReader(new FileReader(
					"PublicKey.txt"));
			String[] publicKey = reader.readLine().split(",");
			reader = new BufferedReader(new FileReader("PrivateKey.txt"));
			String[] privateKey = reader.readLine().split(",");

			System.out.println("PublicKey[0] E: "+publicKey[0]);
			
			RSA rsa = new RSA(
					new BigInteger(publicKey[0].toString()),
					new BigInteger(publicKey[1].toString()),
					new BigInteger(privateKey[0].toString())
					);
			// rsa.printStart();
			String plainText = rsa.toascii(message);
			System.out.println("PlainText:\t" + plainText);

			String cipherText = rsa.encipher(new BigInteger(plainText));
			System.out.println("CipherText:\t" + cipherText);

			String decipheredText = rsa.decipher(new BigInteger(cipherText));
			System.out.println("DecipheredText: " + decipheredText);

			reader.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public RSA() {
		setP(BigInteger.probablePrime(BITLENGTH, new Random()));
		setQ(BigInteger.probablePrime(BITLENGTH, new Random()));
		setN(getP().multiply(getQ()));
		setE(getP().nextProbablePrime());
		setPhi(getP().subtract(BigInteger.ONE).multiply(
				getQ().subtract(BigInteger.ONE)));
		setInverse(getE().modInverse(getPhi()));
		
		
		
//		try {
//			BufferedReader reader = new BufferedReader(new FileReader("PublicKey.txt"));
//			String[] publicKey = reader.readLine().split(",");
//			BufferedReader reader2 = new BufferedReader(new FileReader("PrivateKey.txt"));
//			String[] privateKey = reader2.readLine().split(",");
//			
//			setN(new BigInteger(publicKey[1]));
//			setE(new BigInteger(publicKey[0]));
//			setInverse(new BigInteger(privateKey[0]));
//			reader.close();
//			reader2.close();
//			
//			
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}

		
		
		
	}

	public RSA(BigInteger publicKeyE, BigInteger publicKeyN, BigInteger privateKeyI) {
		setPublicKeys(publicKeyE, publicKeyN);
		setInverse(privateKeyI);
	}

	public void keysToFile(BigInteger e, BigInteger inverse, BigInteger n) {

		try {
			FileWriter writer = new FileWriter(new File("PublicKey.txt"));
			writer.write(e.toString() + "," + n.toString());

			FileWriter writer2 = new FileWriter(new File("PrivateKey.txt"));
			writer2.write(inverse.toString() + "," + n.toString());

			writer.close();
			writer2.close();
		} catch (IOException e1) {
			e1.printStackTrace();
		}

	}

	public void generateNewKeys() {
		setP(BigInteger.probablePrime(BITLENGTH, new Random()));
		setQ(BigInteger.probablePrime(BITLENGTH, new Random()));
		setN(getP().multiply(getQ()));
		setE(getP().nextProbablePrime());
		setPhi(getP().subtract(BigInteger.ONE).multiply(
				getQ().subtract(BigInteger.ONE)));
		setInverse(getE().modInverse(getPhi()));

		keysToFile(getE(), getInverse(), getPhi());
	}

}