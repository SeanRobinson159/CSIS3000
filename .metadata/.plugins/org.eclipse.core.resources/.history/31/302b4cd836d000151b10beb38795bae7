/*
 * Covert a file to a string parse it into 200 character substrings
 *  and insert these into an ArrayList
 *  Use paddedAscii to convert these into BigIntegers of exactly 600 digits in
 *  length and insert these into another ArrayList
 *  In very one of the above, the last block will probably be shorter.
 */ 

package Week6;

import java.math.BigInteger;
import java.util.Random;

public class twoBigInts {

	public static void main(String[] args) {
		String s = fileToString("./cs-description.txt");
		ArrayList<String> sBlocks = toStringBlocks(s);
		ArrayList<BigInteger> plainText = toBigIntegerBlocks(sBlocks);
	}

	private static String fileToString(String string) {
		return null;
	}

	//Parse a string into 200 character substrings
	//Beware of the indices on substring
	public static ArrayList<String> toStringBlocks(String str) {
		
	}
	
	//Convert each substring of length 200 to a BigInteger of length 600.
	public static ArrayList<BigInteger> toBigIntegerBlocks(ArrayList<String> sBlocks){
		
	}
	
	public static BigInteger multiply(BigInteger a, BigInteger b) {
		return a.multiply(b);
	}

	private static BigInteger randomBigInteger(int numberOfDigits) {
		Random random = new Random();
		// if we know the number of decimal digits, how many bits are required?
		int length = (int) (3.32 * (double) numberOfDigits);
		return new BigInteger(length, random);
	}

	public static BigInteger randomPrime(int numberOfDigits) {
		BigInteger randomBigInt = randomBigInteger(numberOfDigits);
		return randomBigInt.nextProbablePrime();
	}

}
