import java.math.BigInteger;
import java.util.Random;

public class RSA {

	private static BigInteger p, q, n, phi, e;
	private static int bitsize;

	public RSA(BigInteger n, BigInteger e) {
		this.n = n;
		this.e = e;
	}

	public RSA(int bits) {
		bitsize = bits;
		Random r = new Random();
		p = BigInteger.probablePrime(bitsize / 2, r);
		q = BigInteger.probablePrime(bitsize / 2, r);

		n = p.multiply(q);
		e = new BigInteger("13");
		phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
	}

	public static void main(String[] args) {
		RSA rsa = new RSA(2048);

		String text1 = "Hello World";
		System.out.println("Plaintext: " + text1);
		BigInteger plaintext = new BigInteger(text1.getBytes());

		BigInteger ciphertext = rsa.encipher(plaintext);
		System.out.println("Ciphertext: " + ciphertext);
		plaintext = rsa.decipher(ciphertext);

		String text2 = new String(plaintext.toByteArray());
		System.out.println("Plaintext: " + text2);
	}

	public BigInteger encipher(BigInteger message) {
		return message.modPow(e, n);
	}

	public BigInteger decipher(BigInteger message) {
		return message.modPow(e.modInverse(phi), n);
	}

}

// public static void main(String[] args) {
// // p = BigInteger.probablePrime(5, new Random());
// // q = BigInteger.probablePrime(5, new Random());
// p = new BigInteger("43");
// q = new BigInteger("59");
//
// n = p.multiply(q);
// e = new BigInteger("13");
// phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
//
// System.out.println("p = \t" + p);
// System.out.println("q = \t" + q);
// System.out.println("n = \t" + n);
// System.out.println("ø(n) = \t" + phi);
// System.out.println("e = \t" + e);
// System.out.println("GCD(e,ø(n)) = " + e.gcd(phi));
// System.out.println();
//
// String ascii = toascii("HELLO WORLD ");
//
// String[] blocks = breakIntoBlocks(ascii);
//
// for (int i = 0; i < blocks.length; i++) {
// System.out.print(blocks[i] + "\t");
// }
//
// System.out.println();
//
// String[] code = encipher(blocks);
//
// for (int i = 0; i < code.length; i++) {
// System.out.print(code[i] + "\t");
// }
// System.out.println();
//
// decipher(code);
// //
// // for (int i = 0; i < decoded.length; i++) {
// // System.out.print(decoded[i] + "\t");
// // }
//
// }
//
// public static String[] encipher(String[] ascii) {
// String[] code = new String[ascii.length];
// for (int i = 0; i < ascii.length; i++) {
// BigInteger c = new BigInteger(ascii[i]);
// String s = c.modPow(e, n).toString();
// while (s.length() < 3) {
// s = "0" + s;
// }
// code[i] = s;
// }
//
// return code;
// }
//
// public static String[] decipher(String[] code) {
//
// for (int i = 0; i < code.length; i++) {
// BigInteger s1 = new BigInteger(code[i]);
// s1 = s1.modPow(e.modInverse(phi), phi);
// System.out.print(s1+"\t");
// }
// System.out.println();
//
// return null;
// }
//
// public static String[] breakIntoBlocks(String ascii) {
// String[] blocks = new String[ascii.length()];
//
// for (int i = 0; i < blocks.length; i++) {
// if (ascii.length() >= 3) {
// blocks[i] = ascii.substring(0, 3);
// ascii = ascii.substring(3, ascii.length());
// } else {
// blocks[i] = "000";
// }
// }
//
// return blocks;
// }
//
// public static String toascii(String string) {
// string.toUpperCase();
// char[] chars = string.toCharArray();
// String code = "";
// for (int i = 0; i < chars.length; i++) {
// code = code + asciiValue(chars[i]);
// // System.out.println(asciiValue(chars[i]) + " = " + chars[i]);
// }
// return code;
// }
//
// public static String asciiValue(char letter) {
// int ascii = letter;
//
// if (ascii < 10) {
// return ("0" + ascii);
// }
// return (ascii + "");
// }
//
// }
