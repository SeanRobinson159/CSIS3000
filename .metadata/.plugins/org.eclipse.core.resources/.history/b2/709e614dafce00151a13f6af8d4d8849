package Week6;

import java.math.BigInteger;
import java.util.Random;

public class BigIntegerStuff {

	public static void main(String[] args) {
		BigInteger one = BigInteger.ONE;
		BigInteger p;	//4353148317158884929938894629323657442790082275333762242118934090249129324223327569113947802205405349279485526159428071268333238900209280543207988503881018624670549086033276923223838188563176535643492283916713896272727572123233998850168662186120814786676825737234938518198082619261331585429597830255697
		BigInteger q;	//135829747332072109818262617213061327917137635061428931755186068654850529026272480796477314029141026524377293503600198814264691923195009167306573346023202296741243485400316177320752203456536146226410922239330669435336987877241755168287535519453259856371328454759510532906388630312005953250794598326251
		BigInteger n;	//
		BigInteger phiOfN;
		BigInteger e;
		BigInteger d; // Private exponent

		int firstThree = 0;
		int lengthOfN = 0;
		do {
			p = randomPrime(301);
			q = randomPrime(300);
			n = multiply(p, q);
			firstThree = new Integer(n.toString().substring(0, 3));
			lengthOfN = n.toString().length();
		} while (lengthOfN != 600 && firstThree < 355); // N needs to be exactly
														// 600 decimal digits,
														// and has to be larger
														// than 355...
		System.out.println("p = " + p);
		System.out.println("q = " + q);
		System.out.println("n = " + n); // N needs to be exactly 600 digits!
		System.out.println("Length(n) = " + lengthOfN);
		System.out.println("FirstThree = " + firstThree);
		
		phiOfN = multiply(p.subtract(one), q.subtract(one));
		System.out.println("Phi of n = " + phiOfN);
	}

	public static BigInteger multiply(BigInteger a, BigInteger b) {
		return a.multiply(b);
	}

	private static BigInteger randomBigInteger(int numberOfDigits) {
		Random random = new Random();
		// if we know the number of decimal digits, how many bits are required?
		int length = (int) (3.32 * (double) numberOfDigits);
		return new BigInteger(length, random);
	}

	public static BigInteger randomPrime(int numberOfDigits) {
		BigInteger randomBigInt = randomBigInteger(numberOfDigits);
		return randomBigInt.nextProbablePrime();
	}

}