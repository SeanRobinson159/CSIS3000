import java.math.BigInteger;
import java.util.Arrays;
import java.util.Random;

public class RSA {

	private static BigInteger p, q, n, phi, e;

	public static void main(String[] args) {
		p = BigInteger.probablePrime(512, new Random());
		q = BigInteger.probablePrime(512, new Random());

		n = p.multiply(q);
		e = p.nextProbablePrime();
		phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));

		System.out.println("p = \t" + p);
		System.out.println("q = \t" + q);
		System.out.println("n = \t" + n);
		System.out.println("ø(n) = \t" + phi);
		System.out.println("e = \t" + e);
		System.out.println("GCD(e,ø(n)) = " + e.gcd(phi));
		System.out.println();

		String ascii = toascii(" Test ");

		String[] blocks = breakIntoBlocks(ascii);
		String c = "";
		for (int i = 0; i < blocks.length; i++) {
			c += blocks[i];
		}

		System.out.println(c);

		// String[] code = encipher(blocks);

		// for (int i = 0; i < code.length; i++) {
		// System.out.print(code[i]);
		// }
		// System.out.println();

		// String[] decipheredCode = decipher(code);
		//
		// for (int i = 0; i < decipheredCode.length; i++) {
		// System.out.print(decipheredCode[i]);
		// }
		System.out.println();
		String code2 = encipher2(new BigInteger(c));
		System.out.println(code2);

		String decipheredCode2 = decipher2(new BigInteger(code2));
		System.out.println(decipheredCode2);

		System.out.println(valueToAscii2(decipheredCode2));

		// System.out.println("\n\nText: " + valueToAscii(decipheredCode));

	}

	public static String[] encipher(String[] ascii) {
		String[] code = new String[ascii.length];
		for (int i = 0; i < ascii.length; i++) {
			BigInteger c = new BigInteger(ascii[i]);
			String s = c.modPow(e, n).toString();
			while (s.length() < 4) {
				s = "0" + s;
			}
			code[i] = s;
		}

		return code;
	}

	public static String encipher2(BigInteger c) {
		String s = c.modPow(e, n).toString();
		return s;
	}

	public static String decipher2(BigInteger code) {
		String s = code.modPow(e.modInverse(phi), n).toString();
		return s;
	}

	public static String valueToAscii2(String decipheredCode) {
		String decipheredText = "";
		while (decipheredCode.length() >= 3) {
			decipheredText += String.valueOf((char) Integer
					.parseInt(decipheredCode.substring(0, 3)));
			decipheredCode = decipheredCode.substring(3, decipheredCode.length());
		}
		return decipheredText;
	}

	public static String[] decipher(String[] code) {
		String[] decipheredCode = new String[code.length];
		for (int i = 0; i < code.length; i++) {
			BigInteger a = new BigInteger(code[i]);
			String s = a.modPow(e.modInverse(phi), n).toString();
			while (s.length() < 4) {
				s = "0" + s;
			}
			decipheredCode[i] = s;
		}
		return decipheredCode;
	}

	public static String valueToAscii(String[] decipheredCode) {
		String decipheredText = "";
		for (int i = 0; i < decipheredCode.length; i++) {
			String temp = decipheredCode[i].substring(0, 3);
			temp = String.valueOf((char) Integer.parseInt(temp));
			decipheredText += temp;
		}

		return decipheredText;
	}

	public static String[] breakIntoBlocks(String ascii) {
		String[] blocks = new String[100];

		for (int i = 0; i < blocks.length; i++) {
			if (ascii.length() >= 3) {
				blocks[i] = ascii.substring(0, 3);
				ascii = ascii.substring(3, ascii.length());
			} else {
				blocks[i] = "000";
			}
		}

		return blocks;
	}

	public static String toascii(String s) {
		char[] chars = s.toCharArray();
		String code = "";
		for (int i = 0; i < chars.length; i++) {
			code += asciiToValue(chars[i]);
		}
		return code;
	}

	public static String asciiToValue(char letter) {
		int ascii = letter;

		if (ascii < 100) {
			return ("0" + ascii);
		}
		return (ascii + "");
	}

}