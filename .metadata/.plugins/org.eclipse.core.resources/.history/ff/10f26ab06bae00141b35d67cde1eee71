import java.math.BigInteger;
import java.util.Random;

public class Main {

	private static BigInteger p, q, n, phi, e;

	public static void main(String[] args) {
		// p = BigInteger.probablePrime(5, new Random());
		// q = BigInteger.probablePrime(5, new Random());
		p = new BigInteger("43");
		q = new BigInteger("59");

		n = p.multiply(q);
		e = new BigInteger("13");
		phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));

		System.out.println("p = \t" + p);
		System.out.println("q = \t" + q);
		System.out.println("n = \t" + n);
		System.out.println("Ã¸(n) = \t" + phi);
		System.out.println("e = \t" + e);
		System.out.println("GCD = 1? " + e.gcd(phi));
		System.out.println();

		String ascii = toascii("HELLO WORLD ");

		String[] blocks = breakIntoBlocks(ascii);

		for (int i = 0; i < blocks.length; i++) {
			System.out.print(blocks[i] + "\t");
		}

		System.out.println();

		String[] code = encipher(blocks);

		for (int i = 0; i < code.length; i++) {
			System.out.print(code[i] + "\t");
		}
		System.out.println();

		decipher(code);
		//
		// for (int i = 0; i < decoded.length; i++) {
		// System.out.print(decoded[i] + "\t");
		// }

	}

	public static String[] encipher(String[] ascii) {
		String[] code = new String[ascii.length];
		for (int i = 0; i < ascii.length; i++) {
			BigInteger c = new BigInteger(ascii[i]);
			String s = c.modPow(e, n).toString();
			while (s.length() < 4) {
				s = "0" + s;
			}
			code[i] = s;
		}

		return code;
	}

	public static String[] decipher(String[] code) {		
		BigInteger s1 = new BigInteger(code[0].substring(0, 2));
		BigInteger s2 = new BigInteger(code[0].substring(2, 4));

		System.out.println(s1);
		System.out.println(s2);
		
		s1 = s1.modPow(new BigInteger("937"), new BigInteger(n+""));
		System.out.println(s1);

		
		
		
		return null;
	}

	public static String[] breakIntoBlocks(String ascii) {
		String[] blocks = new String[ascii.length()];

		for (int i = 0; i < blocks.length; i++) {
			if (ascii.length() >= 4) {
				blocks[i] = ascii.substring(0, 4);
				ascii = ascii.substring(4, ascii.length());
			} else {
				blocks[i] = "0000";
			}
		}

		return blocks;
	}

	public static String toascii(String string) {
		string.toLowerCase();
		char[] chars = string.toCharArray();
		String code = "";
		for (int i = 0; i < chars.length; i++) {
			code = code + asciiValue(chars[i]);
			// System.out.println(asciiValue(chars[i]) + " = " + chars[i]);
		}
		return code;
	}

	public static String asciiValue(char letter) {
		int ascii = letter;

		if (ascii < 10) {
			return ("0" + ascii);
		}
		return (ascii + "");
	}

}
